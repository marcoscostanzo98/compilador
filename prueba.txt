*- init.txt -*
init {
    a1, b1, w : Float
    var1, var2, x, y, z, a, b, c : Int
    p1, p2, p3 : String
}


*- entero mayor al permitido-*
*- x := 33000 -*

*- and -*
a := 33
b := 1
c := 2
x := 0
y := 0

si (a > b AND c > b)
{
    escribir("a es mas grande que b")
}

si (a > b AND c > b)
{
    si (x == y){
        escribir("a es mas grande que b")
    }
}


*- arithmetic.txt -*
x := 27 - c
x := a + 500
x := 34 * 3
x := a / b


*- assignments.txt -*
w := 99999.99
w := 99.
w := .9999

p1 := "@sdADaSjfla%dfg"
p2 := "asldk  fh sjf"


*- comment.txt -*
*- Esto es un comentario -*


*- if.txt -*
var1 := 1
var2 := 2

si (var1 > var2)
{
    escribir("a es mas grande que b")
}
sino
{
    escribir("a es mas chico o igual a b")
}

*- not.txt -*
a := 1
b := 1
c := 2

si (NOT var1 > var2)
{
    escribir("a no es mas grande que b")
}


*- or.txt -*
a := 1
b := 1
c := 2

si (var1 > var2 OR x > a)
{
    escribir("a es mas chica que b o c")
}

si (var1 > var2)
{
    si(a >= b OR c >= b){
        escribir("b es mas chico que a y c")
    } sino {
        escribir("lo opuesto")
    }
}


*- read.txt -*
leer(base) *- base es una variable -*


*- while.txt -*
a := 1
b := 3

mientras (a > b)
{
    escribir("a es mas grande que b")
    a := a + 1
}

mientras (a > b AND c > b)
{
    escribir("a es mas grande que b")
    a := a + 1
}

mientras (a > b OR c < b)
{
    escribir("a es mas grande que b")
    a := a + 1
}

mientras (a > b OR c < b)
{
    si (c == b){
        escribir("a es mas grande que b")
    }

    a := a + 1
}

*- write.txt -*
escribir("ewr")  *- "ewr" es una cte string -*
escribir(var1)  *- var1 es una variable numÃ©rica definida previamente -*


*- funciones especiales -*
x := getPenultimatePosition([3, 8, 2, 55])

escribir(getPenultimatePosition([3, 8, 2, 55]))

escribir(sumaLosUltimos(5; [28, 13, 4, 5, 17, 52]))

*- menos unario para el resultado de funciones especiales -*
y := -sumaLosUltimos(4; [28, 13, 4, 5, 17, 52])

y := -getPenultimatePosition([28, 13, 4, 5, 17, 52])

*- aritmetica con funciones especiales-*
z := sumaLosUltimos(4; [28, 13, 4, 52]) * getPenultimatePosition([1, 2, 3, 4])

y := - getPenultimatePosition([3, 8, 2, 55]) -x

*- casos de prueba sumaLosUltimos -*
*- pivote menor a 1 -*
z := sumaLosUltimos(0; [28, 13, 4, 52])

*- pivote mayor a cantidad de elementos-*
z := sumaLosUltimos(5; [28, 52])

*- funcion especial usada en una condicion -*
si (sumaLosUltimos(2; [10, 7, 5]) > 10) 
{
    escribir("7 + 5 > 10")
}


*- Comentario anidado -*
    *- comentario *- comentario interno -* externo -*


*- ciclos anidados -*
mientras (NOT x > y)
{
    mientras (y > z)
    {
        z := z + 1
    }

    y := y - 1
}